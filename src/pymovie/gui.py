# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'PyMovie.ui'
#
# Created by: PyQt5 UI code generator 5.12.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1072, 996)
        font = QtGui.QFont()
        font.setFamily(".SF NS Text")
        font.setPointSize(13)
        MainWindow.setFont(font)
        MainWindow.setToolTipDuration(-1)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitterThree = QtWidgets.QSplitter(self.centralwidget)
        self.splitterThree.setOrientation(QtCore.Qt.Vertical)
        self.splitterThree.setObjectName("splitterThree")
        self.splitterTwo = QtWidgets.QSplitter(self.splitterThree)
        self.splitterTwo.setOrientation(QtCore.Qt.Horizontal)
        self.splitterTwo.setObjectName("splitterTwo")
        self.widget = QtWidgets.QWidget(self.splitterTwo)
        self.widget.setObjectName("widget")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.infoButton = QtWidgets.QPushButton(self.widget)
        self.infoButton.setMinimumSize(QtCore.QSize(40, 0))
        self.infoButton.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.infoButton.setObjectName("infoButton")
        self.horizontalLayout_10.addWidget(self.infoButton)
        self.selectAviWcsFolderButton = QtWidgets.QPushButton(self.widget)
        self.selectAviWcsFolderButton.setObjectName("selectAviWcsFolderButton")
        self.horizontalLayout_10.addWidget(self.selectAviWcsFolderButton)
        self.readFitsFolderButton = QtWidgets.QPushButton(self.widget)
        self.readFitsFolderButton.setToolTipDuration(0)
        self.readFitsFolderButton.setStatusTip("")
        self.readFitsFolderButton.setObjectName("readFitsFolderButton")
        self.horizontalLayout_10.addWidget(self.readFitsFolderButton)
        self.horizontalLayout_10.setStretch(0, 1)
        self.horizontalLayout_10.setStretch(1, 2)
        self.horizontalLayout_10.setStretch(2, 2)
        self.verticalLayout_12.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.openBmpPushButton = QtWidgets.QPushButton(self.widget)
        self.openBmpPushButton.setObjectName("openBmpPushButton")
        self.horizontalLayout_12.addWidget(self.openBmpPushButton)
        self.readAviFileButton = QtWidgets.QPushButton(self.widget)
        self.readAviFileButton.setObjectName("readAviFileButton")
        self.horizontalLayout_12.addWidget(self.readAviFileButton)
        self.horizontalLayout_12.setStretch(0, 2)
        self.horizontalLayout_12.setStretch(1, 2)
        self.verticalLayout_12.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.invertImagesCheckBox = QtWidgets.QCheckBox(self.widget)
        self.invertImagesCheckBox.setObjectName("invertImagesCheckBox")
        self.horizontalLayout_3.addWidget(self.invertImagesCheckBox)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.showImageControlCheckBox = QtWidgets.QCheckBox(self.widget)
        self.showImageControlCheckBox.setObjectName("showImageControlCheckBox")
        self.horizontalLayout_3.addWidget(self.showImageControlCheckBox)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.editAperturesButton = QtWidgets.QPushButton(self.widget)
        self.editAperturesButton.setObjectName("editAperturesButton")
        self.horizontalLayout_3.addWidget(self.editAperturesButton)
        self.verticalLayout_12.addLayout(self.horizontalLayout_3)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.defRadiusSpinner = QtWidgets.QDoubleSpinBox(self.widget)
        self.defRadiusSpinner.setMinimum(2.0)
        self.defRadiusSpinner.setMaximum(24.0)
        self.defRadiusSpinner.setSingleStep(0.5)
        self.defRadiusSpinner.setProperty("value", 5.3)
        self.defRadiusSpinner.setObjectName("defRadiusSpinner")
        self.horizontalLayout.addWidget(self.defRadiusSpinner)
        self.maskRadiusLabel = QtWidgets.QLabel(self.widget)
        self.maskRadiusLabel.setObjectName("maskRadiusLabel")
        self.horizontalLayout.addWidget(self.maskRadiusLabel)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem3)
        self.setMskthLabel = QtWidgets.QLabel(self.widget)
        self.setMskthLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.setMskthLabel.setObjectName("setMskthLabel")
        self.horizontalLayout.addWidget(self.setMskthLabel)
        self.threshValueEdit = QtWidgets.QSpinBox(self.widget)
        self.threshValueEdit.setToolTip("")
        self.threshValueEdit.setMaximum(99999)
        self.threshValueEdit.setObjectName("threshValueEdit")
        self.horizontalLayout.addWidget(self.threshValueEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.backSmallButton = QtWidgets.QPushButton(self.widget)
        self.backSmallButton.setMaximumSize(QtCore.QSize(120, 16777215))
        self.backSmallButton.setObjectName("backSmallButton")
        self.verticalLayout_7.addWidget(self.backSmallButton)
        self.backBigButton = QtWidgets.QPushButton(self.widget)
        self.backBigButton.setMaximumSize(QtCore.QSize(120, 16777215))
        self.backBigButton.setObjectName("backBigButton")
        self.verticalLayout_7.addWidget(self.backBigButton)
        self.horizontalLayout_6.addLayout(self.verticalLayout_7)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.forwardSmallButton = QtWidgets.QPushButton(self.widget)
        self.forwardSmallButton.setMaximumSize(QtCore.QSize(120, 16777215))
        self.forwardSmallButton.setObjectName("forwardSmallButton")
        self.verticalLayout_8.addWidget(self.forwardSmallButton)
        self.forwardBigButton = QtWidgets.QPushButton(self.widget)
        self.forwardBigButton.setMaximumSize(QtCore.QSize(120, 16777215))
        self.forwardBigButton.setObjectName("forwardBigButton")
        self.verticalLayout_8.addWidget(self.forwardBigButton)
        self.horizontalLayout_6.addLayout(self.verticalLayout_8)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.currentFrameLabel = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.currentFrameLabel.sizePolicy().hasHeightForWidth())
        self.currentFrameLabel.setSizePolicy(sizePolicy)
        self.currentFrameLabel.setMinimumSize(QtCore.QSize(0, 0))
        self.currentFrameLabel.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.currentFrameLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.currentFrameLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.currentFrameLabel.setIndent(-1)
        self.currentFrameLabel.setObjectName("currentFrameLabel")
        self.verticalLayout_3.addWidget(self.currentFrameLabel)
        self.stopAtFrameLabel = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stopAtFrameLabel.sizePolicy().hasHeightForWidth())
        self.stopAtFrameLabel.setSizePolicy(sizePolicy)
        self.stopAtFrameLabel.setMinimumSize(QtCore.QSize(0, 0))
        self.stopAtFrameLabel.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.stopAtFrameLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.stopAtFrameLabel.setObjectName("stopAtFrameLabel")
        self.verticalLayout_3.addWidget(self.stopAtFrameLabel)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.currentFrameSpinBox = QtWidgets.QSpinBox(self.widget)
        self.currentFrameSpinBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.currentFrameSpinBox.sizePolicy().hasHeightForWidth())
        self.currentFrameSpinBox.setSizePolicy(sizePolicy)
        self.currentFrameSpinBox.setMinimumSize(QtCore.QSize(100, 0))
        self.currentFrameSpinBox.setMaximumSize(QtCore.QSize(73, 16777215))
        self.currentFrameSpinBox.setToolTip("")
        self.currentFrameSpinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.currentFrameSpinBox.setMaximum(99999)
        self.currentFrameSpinBox.setObjectName("currentFrameSpinBox")
        self.verticalLayout_4.addWidget(self.currentFrameSpinBox)
        self.stopAtFrameSpinBox = QtWidgets.QSpinBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stopAtFrameSpinBox.sizePolicy().hasHeightForWidth())
        self.stopAtFrameSpinBox.setSizePolicy(sizePolicy)
        self.stopAtFrameSpinBox.setMinimumSize(QtCore.QSize(100, 0))
        self.stopAtFrameSpinBox.setMaximumSize(QtCore.QSize(73, 16777215))
        self.stopAtFrameSpinBox.setToolTip("")
        self.stopAtFrameSpinBox.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.stopAtFrameSpinBox.setMaximum(99999)
        self.stopAtFrameSpinBox.setObjectName("stopAtFrameSpinBox")
        self.verticalLayout_4.addWidget(self.stopAtFrameSpinBox)
        self.horizontalLayout_6.addLayout(self.verticalLayout_4)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem4)
        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setContentsMargins(16, -1, 0, -1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.runRadioButton = QtWidgets.QRadioButton(self.widget)
        self.runRadioButton.setMinimumSize(QtCore.QSize(0, 0))
        self.runRadioButton.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.runRadioButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.runRadioButton.setObjectName("runRadioButton")
        self.verticalLayout_6.addWidget(self.runRadioButton)
        self.pauseRadioButton = QtWidgets.QRadioButton(self.widget)
        self.pauseRadioButton.setMinimumSize(QtCore.QSize(0, 0))
        self.pauseRadioButton.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.pauseRadioButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pauseRadioButton.setChecked(True)
        self.pauseRadioButton.setObjectName("pauseRadioButton")
        self.verticalLayout_6.addWidget(self.pauseRadioButton)
        self.horizontalLayout_6.addLayout(self.verticalLayout_6)
        self.verticalLayout_12.addLayout(self.horizontalLayout_6)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.setMaxStopButton = QtWidgets.QPushButton(self.widget)
        self.setMaxStopButton.setObjectName("setMaxStopButton")
        self.horizontalLayout_7.addWidget(self.setMaxStopButton)
        self.displayPlotsButton = QtWidgets.QPushButton(self.widget)
        self.displayPlotsButton.setObjectName("displayPlotsButton")
        self.horizontalLayout_7.addWidget(self.displayPlotsButton)
        self.writeCsvButton = QtWidgets.QPushButton(self.widget)
        self.writeCsvButton.setObjectName("writeCsvButton")
        self.horizontalLayout_7.addWidget(self.writeCsvButton)
        self.verticalLayout_12.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.roiComboBox = QtWidgets.QComboBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.roiComboBox.sizePolicy().hasHeightForWidth())
        self.roiComboBox.setSizePolicy(sizePolicy)
        self.roiComboBox.setMinimumSize(QtCore.QSize(80, 0))
        self.roiComboBox.setMaximumSize(QtCore.QSize(80, 16777215))
        self.roiComboBox.setCurrentText("")
        self.roiComboBox.setMaxVisibleItems(3)
        self.roiComboBox.setObjectName("roiComboBox")
        self.horizontalLayout_8.addWidget(self.roiComboBox)
        self.selectApertureSizeLabel = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.selectApertureSizeLabel.sizePolicy().hasHeightForWidth())
        self.selectApertureSizeLabel.setSizePolicy(sizePolicy)
        self.selectApertureSizeLabel.setObjectName("selectApertureSizeLabel")
        self.horizontalLayout_8.addWidget(self.selectApertureSizeLabel)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem5)
        self.plotSymbolSizeLabel = QtWidgets.QLabel(self.widget)
        self.plotSymbolSizeLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.plotSymbolSizeLabel.setObjectName("plotSymbolSizeLabel")
        self.horizontalLayout_8.addWidget(self.plotSymbolSizeLabel)
        self.plotSymbolSizeSpinBox = QtWidgets.QSpinBox(self.widget)
        self.plotSymbolSizeSpinBox.setToolTip("")
        self.plotSymbolSizeSpinBox.setMinimum(1)
        self.plotSymbolSizeSpinBox.setMaximum(20)
        self.plotSymbolSizeSpinBox.setObjectName("plotSymbolSizeSpinBox")
        self.horizontalLayout_8.addWidget(self.plotSymbolSizeSpinBox)
        self.verticalLayout_12.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_12.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.viewFieldsCheckBox = QtWidgets.QCheckBox(self.widget)
        self.viewFieldsCheckBox.setEnabled(False)
        self.viewFieldsCheckBox.setObjectName("viewFieldsCheckBox")
        self.verticalLayout_5.addWidget(self.viewFieldsCheckBox)
        self.processAsFieldsCheckBox = QtWidgets.QCheckBox(self.widget)
        self.processAsFieldsCheckBox.setEnabled(True)
        self.processAsFieldsCheckBox.setObjectName("processAsFieldsCheckBox")
        self.verticalLayout_5.addWidget(self.processAsFieldsCheckBox)
        self.topFieldFirstRadioButton = QtWidgets.QRadioButton(self.widget)
        self.topFieldFirstRadioButton.setEnabled(True)
        self.topFieldFirstRadioButton.setChecked(False)
        self.topFieldFirstRadioButton.setObjectName("topFieldFirstRadioButton")
        self.verticalLayout_5.addWidget(self.topFieldFirstRadioButton)
        self.bottomFieldFirstRadioButton = QtWidgets.QRadioButton(self.widget)
        self.bottomFieldFirstRadioButton.setEnabled(True)
        self.bottomFieldFirstRadioButton.setChecked(True)
        self.bottomFieldFirstRadioButton.setObjectName("bottomFieldFirstRadioButton")
        self.verticalLayout_5.addWidget(self.bottomFieldFirstRadioButton)
        self.useYellowMaskCheckBox = QtWidgets.QCheckBox(self.widget)
        self.useYellowMaskCheckBox.setObjectName("useYellowMaskCheckBox")
        self.verticalLayout_5.addWidget(self.useYellowMaskCheckBox)
        self.horizontalLayout_14.addLayout(self.verticalLayout_5)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setSpacing(0)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem6)
        self.ucac4Label = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ucac4Label.sizePolicy().hasHeightForWidth())
        self.ucac4Label.setSizePolicy(sizePolicy)
        self.ucac4Label.setObjectName("ucac4Label")
        self.horizontalLayout_5.addWidget(self.ucac4Label)
        self.starIdEdit = QtWidgets.QLineEdit(self.widget)
        self.starIdEdit.setObjectName("starIdEdit")
        self.horizontalLayout_5.addWidget(self.starIdEdit)
        self.queryVizierButton = QtWidgets.QPushButton(self.widget)
        self.queryVizierButton.setObjectName("queryVizierButton")
        self.horizontalLayout_5.addWidget(self.queryVizierButton)
        self.verticalLayout_11.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setSpacing(0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem7)
        self.coordinatesEdit = QtWidgets.QLineEdit(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.coordinatesEdit.sizePolicy().hasHeightForWidth())
        self.coordinatesEdit.setSizePolicy(sizePolicy)
        self.coordinatesEdit.setMinimumSize(QtCore.QSize(260, 0))
        self.coordinatesEdit.setObjectName("coordinatesEdit")
        self.horizontalLayout_13.addWidget(self.coordinatesEdit)
        self.saveTargetLocButton = QtWidgets.QPushButton(self.widget)
        self.saveTargetLocButton.setEnabled(False)
        self.saveTargetLocButton.setObjectName("saveTargetLocButton")
        self.horizontalLayout_13.addWidget(self.saveTargetLocButton)
        self.verticalLayout_11.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14.addLayout(self.verticalLayout_11)
        self.verticalLayout_12.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setSpacing(0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.vtiSelectLabel = QtWidgets.QLabel(self.widget)
        self.vtiSelectLabel.setObjectName("vtiSelectLabel")
        self.horizontalLayout_17.addWidget(self.vtiSelectLabel)
        self.vtiSelectComboBox = QtWidgets.QComboBox(self.widget)
        self.vtiSelectComboBox.setCurrentText("")
        self.vtiSelectComboBox.setObjectName("vtiSelectComboBox")
        self.horizontalLayout_17.addWidget(self.vtiSelectComboBox)
        self.repositionOcrBoxesLabel = QtWidgets.QLabel(self.widget)
        self.repositionOcrBoxesLabel.setObjectName("repositionOcrBoxesLabel")
        self.horizontalLayout_17.addWidget(self.repositionOcrBoxesLabel)
        self.jogOcrBoxesUpButton = QtWidgets.QPushButton(self.widget)
        self.jogOcrBoxesUpButton.setMinimumSize(QtCore.QSize(72, 0))
        self.jogOcrBoxesUpButton.setObjectName("jogOcrBoxesUpButton")
        self.horizontalLayout_17.addWidget(self.jogOcrBoxesUpButton)
        self.jogOcrBoxesLeftButton = QtWidgets.QPushButton(self.widget)
        self.jogOcrBoxesLeftButton.setMinimumSize(QtCore.QSize(72, 0))
        self.jogOcrBoxesLeftButton.setObjectName("jogOcrBoxesLeftButton")
        self.horizontalLayout_17.addWidget(self.jogOcrBoxesLeftButton)
        self.jogOcrBoxesRightButton = QtWidgets.QPushButton(self.widget)
        self.jogOcrBoxesRightButton.setMinimumSize(QtCore.QSize(72, 0))
        self.jogOcrBoxesRightButton.setObjectName("jogOcrBoxesRightButton")
        self.horizontalLayout_17.addWidget(self.jogOcrBoxesRightButton)
        self.jogOcrBoxesDownButton = QtWidgets.QPushButton(self.widget)
        self.jogOcrBoxesDownButton.setMinimumSize(QtCore.QSize(72, 0))
        self.jogOcrBoxesDownButton.setObjectName("jogOcrBoxesDownButton")
        self.horizontalLayout_17.addWidget(self.jogOcrBoxesDownButton)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_17.addItem(spacerItem8)
        self.verticalLayout_12.addLayout(self.horizontalLayout_17)
        spacerItem9 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_12.addItem(spacerItem9)
        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setMinimumSize(QtCore.QSize(20, 0))
        self.label_7.setMaximumSize(QtCore.QSize(20, 16777215))
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.verticalLayout_12.addWidget(self.label_7)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.stackFramesButton = QtWidgets.QPushButton(self.widget)
        self.stackFramesButton.setObjectName("stackFramesButton")
        self.horizontalLayout_11.addWidget(self.stackFramesButton)
        self.label_13 = QtWidgets.QLabel(self.widget)
        self.label_13.setMinimumSize(QtCore.QSize(10, 0))
        self.label_13.setMaximumSize(QtCore.QSize(10, 16777215))
        self.label_13.setText("")
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_11.addWidget(self.label_13)
        self.redactLinesEdit = QtWidgets.QLineEdit(self.widget)
        self.redactLinesEdit.setMinimumSize(QtCore.QSize(60, 0))
        self.redactLinesEdit.setMaximumSize(QtCore.QSize(60, 16777215))
        self.redactLinesEdit.setToolTip("")
        self.redactLinesEdit.setObjectName("redactLinesEdit")
        self.horizontalLayout_11.addWidget(self.redactLinesEdit)
        self.finderRedactLinesLabel = QtWidgets.QLabel(self.widget)
        self.finderRedactLinesLabel.setMinimumSize(QtCore.QSize(85, 0))
        self.finderRedactLinesLabel.setObjectName("finderRedactLinesLabel")
        self.horizontalLayout_11.addWidget(self.finderRedactLinesLabel)
        self.label_14 = QtWidgets.QLabel(self.widget)
        self.label_14.setMinimumSize(QtCore.QSize(10, 0))
        self.label_14.setText("")
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_11.addWidget(self.label_14)
        self.numFramesToStackEdit = QtWidgets.QLineEdit(self.widget)
        self.numFramesToStackEdit.setMinimumSize(QtCore.QSize(60, 0))
        self.numFramesToStackEdit.setMaximumSize(QtCore.QSize(60, 16777215))
        self.numFramesToStackEdit.setToolTip("")
        self.numFramesToStackEdit.setObjectName("numFramesToStackEdit")
        self.horizontalLayout_11.addWidget(self.numFramesToStackEdit)
        self.finderNumFramesLabel = QtWidgets.QLabel(self.widget)
        self.finderNumFramesLabel.setMinimumSize(QtCore.QSize(0, 0))
        self.finderNumFramesLabel.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.finderNumFramesLabel.setObjectName("finderNumFramesLabel")
        self.horizontalLayout_11.addWidget(self.finderNumFramesLabel)
        self.label_15 = QtWidgets.QLabel(self.widget)
        self.label_15.setMinimumSize(QtCore.QSize(10, 0))
        self.label_15.setText("")
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_11.addWidget(self.label_15)
        self.label_16 = QtWidgets.QLabel(self.widget)
        self.label_16.setMinimumSize(QtCore.QSize(10, 0))
        self.label_16.setText("")
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_11.addWidget(self.label_16)
        self.stackerProgressBar = QtWidgets.QProgressBar(self.widget)
        self.stackerProgressBar.setProperty("value", 0)
        self.stackerProgressBar.setObjectName("stackerProgressBar")
        self.horizontalLayout_11.addWidget(self.stackerProgressBar)
        self.verticalLayout_12.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setSpacing(0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.metadataButton = QtWidgets.QPushButton(self.widget)
        self.metadataButton.setObjectName("metadataButton")
        self.verticalLayout_9.addWidget(self.metadataButton)
        self.demoMeanPushButton = QtWidgets.QPushButton(self.widget)
        self.demoMeanPushButton.setObjectName("demoMeanPushButton")
        self.verticalLayout_9.addWidget(self.demoMeanPushButton)
        self.view3DButton = QtWidgets.QPushButton(self.widget)
        self.view3DButton.setObjectName("view3DButton")
        self.verticalLayout_9.addWidget(self.view3DButton)
        self.horizontalLayout_16.addLayout(self.verticalLayout_9)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(-1, -1, -1, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.frameToFitsButton = QtWidgets.QPushButton(self.widget)
        self.frameToFitsButton.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameToFitsButton.sizePolicy().hasHeightForWidth())
        self.frameToFitsButton.setSizePolicy(sizePolicy)
        self.frameToFitsButton.setMinimumSize(QtCore.QSize(220, 0))
        self.frameToFitsButton.setMaximumSize(QtCore.QSize(220, 16777215))
        self.frameToFitsButton.setObjectName("frameToFitsButton")
        self.horizontalLayout_4.addWidget(self.frameToFitsButton)
        self.timestampHeightEdit = QtWidgets.QLineEdit(self.widget)
        self.timestampHeightEdit.setMinimumSize(QtCore.QSize(60, 0))
        self.timestampHeightEdit.setMaximumSize(QtCore.QSize(60, 16777215))
        self.timestampHeightEdit.setToolTip("")
        self.timestampHeightEdit.setObjectName("timestampHeightEdit")
        self.horizontalLayout_4.addWidget(self.timestampHeightEdit)
        self.astrometryRedactLabel = QtWidgets.QLabel(self.widget)
        self.astrometryRedactLabel.setMinimumSize(QtCore.QSize(70, 0))
        self.astrometryRedactLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.astrometryRedactLabel.setObjectName("astrometryRedactLabel")
        self.horizontalLayout_4.addWidget(self.astrometryRedactLabel)
        self.verticalLayout_10.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setSpacing(0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.manualWcsButton = QtWidgets.QPushButton(self.widget)
        self.manualWcsButton.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.manualWcsButton.sizePolicy().hasHeightForWidth())
        self.manualWcsButton.setSizePolicy(sizePolicy)
        self.manualWcsButton.setMinimumSize(QtCore.QSize(220, 0))
        self.manualWcsButton.setMaximumSize(QtCore.QSize(220, 16777215))
        self.manualWcsButton.setObjectName("manualWcsButton")
        self.horizontalLayout_15.addWidget(self.manualWcsButton)
        self.plateScaleEdit = QtWidgets.QLineEdit(self.widget)
        self.plateScaleEdit.setMinimumSize(QtCore.QSize(60, 0))
        self.plateScaleEdit.setMaximumSize(QtCore.QSize(60, 16777215))
        self.plateScaleEdit.setToolTip("")
        self.plateScaleEdit.setObjectName("plateScaleEdit")
        self.horizontalLayout_15.addWidget(self.plateScaleEdit)
        self.manualPlateScaleLabel = QtWidgets.QLabel(self.widget)
        self.manualPlateScaleLabel.setMinimumSize(QtCore.QSize(70, 0))
        self.manualPlateScaleLabel.setObjectName("manualPlateScaleLabel")
        self.horizontalLayout_15.addWidget(self.manualPlateScaleLabel)
        self.verticalLayout_10.addLayout(self.horizontalLayout_15)
        self.documentationPushButton = QtWidgets.QPushButton(self.widget)
        self.documentationPushButton.setObjectName("documentationPushButton")
        self.verticalLayout_10.addWidget(self.documentationPushButton)
        self.horizontalLayout_16.addLayout(self.verticalLayout_10)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_16.addItem(spacerItem10)
        self.clearAppDataButton = QtWidgets.QPushButton(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clearAppDataButton.sizePolicy().hasHeightForWidth())
        self.clearAppDataButton.setSizePolicy(sizePolicy)
        self.clearAppDataButton.setFlat(False)
        self.clearAppDataButton.setObjectName("clearAppDataButton")
        self.horizontalLayout_16.addWidget(self.clearAppDataButton)
        self.verticalLayout_12.addLayout(self.horizontalLayout_16)
        self.widget1 = QtWidgets.QWidget(self.splitterTwo)
        self.widget1.setObjectName("widget1")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.frameView = ImageView(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(2)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameView.sizePolicy().hasHeightForWidth())
        self.frameView.setSizePolicy(sizePolicy)
        self.frameView.setToolTip("")
        self.frameView.setObjectName("frameView")
        self.verticalLayout_13.addWidget(self.frameView)
        self.mainImageLabel = QtWidgets.QLabel(self.widget1)
        self.mainImageLabel.setObjectName("mainImageLabel")
        self.verticalLayout_13.addWidget(self.mainImageLabel)
        self.splitterOne = QtWidgets.QSplitter(self.splitterThree)
        self.splitterOne.setOrientation(QtCore.Qt.Horizontal)
        self.splitterOne.setObjectName("splitterOne")
        self.widget2 = QtWidgets.QWidget(self.splitterOne)
        self.widget2.setObjectName("widget2")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.widget2)
        self.verticalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.textOut = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.textOut.sizePolicy().hasHeightForWidth())
        self.textOut.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Courier New")
        font.setBold(True)
        font.setWeight(75)
        self.textOut.setFont(font)
        self.textOut.setToolTip("")
        self.textOut.setObjectName("textOut")
        self.verticalLayout_14.addWidget(self.textOut)
        self.textOutLabel = QtWidgets.QLabel(self.widget2)
        self.textOutLabel.setObjectName("textOutLabel")
        self.verticalLayout_14.addWidget(self.textOutLabel)
        self.layoutWidget = QtWidgets.QWidget(self.splitterOne)
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.thumbOneView = ImageView(self.layoutWidget)
        self.thumbOneView.setObjectName("thumbOneView")
        self.verticalLayout_2.addWidget(self.thumbOneView)
        self.thumbnailOneLabel = QtWidgets.QLabel(self.layoutWidget)
        self.thumbnailOneLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.thumbnailOneLabel.setObjectName("thumbnailOneLabel")
        self.verticalLayout_2.addWidget(self.thumbnailOneLabel)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.thumbTwoView = ImageView(self.layoutWidget)
        self.thumbTwoView.setObjectName("thumbTwoView")
        self.verticalLayout.addWidget(self.thumbTwoView)
        self.thumbnailTwoLabel = QtWidgets.QLabel(self.layoutWidget)
        self.thumbnailTwoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.thumbnailTwoLabel.setObjectName("thumbnailTwoLabel")
        self.verticalLayout.addWidget(self.thumbnailTwoLabel)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.gridLayout.addWidget(self.splitterThree, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionLike_special_settings = QtWidgets.QAction(MainWindow)
        self.actionLike_special_settings.setObjectName("actionLike_special_settings")
        self.actionOr_preferences = QtWidgets.QAction(MainWindow)
        self.actionOr_preferences.setObjectName("actionOr_preferences")

        self.retranslateUi(MainWindow)
        self.roiComboBox.setCurrentIndex(-1)
        self.vtiSelectComboBox.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.infoButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking on this button will open a pdf file that provides version history. The most recent version change description will be at the top and so relevant for the version that is currently running.</p></body></html>"))
        self.infoButton.setText(_translate("MainWindow", "Info"))
        self.selectAviWcsFolderButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>An AVI-WCS folder is a container for a single observation video and its related files. As such, there must be only a single .avi file in the folder either explicitly, or by shortcut (Windows) or alias (MacOS). This requirement is enforced.</p><p>This folder also holds a simple text file that contains the Ra and DEC coordinates of the occulted star, filled in by the user through a dialog box that appears when this position information file is found missing.</p><p>This folder is also where the WCS calibration data will be placed if the user opts for calibrating frame 0 by making an on-line submission to astrometry.net.</p><p>This folder is also the default location for storing csv files and copies of the last lightcurve plots.</p><p>Note: avi files are read using OpenCV which employs ffmpeg to do the actual file reading. As a result, a wide range of avi codecs are standardly available.</p><p>In particular, avi files using Lagarith compression will be read without problem.</p><p>There is a remote possibility that an avi was recorded with an unusual codec and so fail to be read by PyMovie. In that case, you will need to use an external file conversion program that can decode the file as recorded and rewrite it using a more common codec.</p></body></html>"))
        self.selectAviWcsFolderButton.setText(_translate("MainWindow", "Select AVI-WCS folder"))
        self.readFitsFolderButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>A <span style=\" color:#fc0107;\">FITS</span> folder should contain a set of *.fits files, all from a single recording.</p><p>There should be no other .fits files in that folder.</p><p>It is assumed that the alphabetic ordering of the file names corresponds to sequential frames.</p><p>There is a button titled <span style=\" font-weight:600; color:#fc0107;\">Show FITS metadata</span> at the bottom left of this panel that will read and display in the text box (lower left corner) all the metadata entries from the currently displayed .fits file image.</p></body></html>"))
        self.readFitsFolderButton.setText(_translate("MainWindow", "Select FITS folder"))
        self.openBmpPushButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>This button opens a \'finder&quot; image.</p><p>What is anticipated is that this image, perhaps prepared by RegiStax or by PyMovie itself, will be used as a star locator for an avi that will be loaded next.</p><p>For this reason, any apertures placed on the image will be preserved and placed automatically on the subsequent avi.</p></body></html>"))
        self.openBmpPushButton.setText(_translate("MainWindow", "Open \"finder\" image"))
        self.readAviFileButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Note: avi files are read using OpenCV which employs ffmpeg to do the actual file reading. As a result, a wide range of avi codecs are standardly available.</p><p>In particular, avi files using Lagarith compression will be read without problem.</p><p>There is a remote possibility that an avi was recorded with an unusual codec and so fail to be read by PyMovie. In that case, you will need to use an external file conversion program that can decode the file as recorded and rewrite it using a more common codec.</p></body></html>"))
        self.readAviFileButton.setText(_translate("MainWindow", "Open AVI file"))
        self.invertImagesCheckBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click this button to invert the Y axes on the main image as well as the two thumbnails.</p><p>This control is necessary because: the origin of composite vide images is the upper left corner of the image; for .fits files, the origin is at the lower left corner of the image.</p></body></html>"))
        self.invertImagesCheckBox.setText(_translate("MainWindow", "Invert images"))
        self.showImageControlCheckBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>If this box is checked, an image control widget will appear to the right of the main image.</p><p>This widget shows a useful/interesting histogram of the image pixel values and gives you the ability to change how pixel values are mapped to the black-to-white grayscale.</p><p>To change the pixel mappings, click and drag the horizontal bars (in the left portion of the widget) that enclose the histogram display and that connect visually to the black-white colorbar.</p><p><span style=\" font-weight:600; color:#fc0107;\">NOTE:</span> changes made via this control do <span style=\" font-weight:600; text-decoration: underline;\">not</span> affect the data that is used for generating lightcurves. It only changes what you see in the main image display. But when you right click on the main image and select \'export\', the display values are what gets exported; this is the <span style=\" font-weight:600; text-decoration: underline;\">only</span> time that \'display\' values are used.</p><p>Until this image control is opened, the grayscale mapping of each image changes based on the minimum and maximum pixel values in that image. This automatic rescaling is usually acceptable but can cause apparent \'flashing\' of the images during playback. Opening and then closing this image control will freeze the automatic rescaling.</p></body></html>"))
        self.showImageControlCheckBox.setText(_translate("MainWindow", "Show image contrast control"))
        self.editAperturesButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this button brings up a table that contains a row for each aperture that has been placed on the image. The columns list the available properties of an aperture. All property values except x,y can be changed from this dialog box.</p><p>Any changes made through this dialog take effect when the dialog is closed. Any data entry errors will be reported at close as well.</p><p>Columns for color, joggable, auto textOut, and thumbnail source have right-click context menus for making changes in those cells.</p><p>The columns for name, thresh, def mask radius, and csv output order are edited by highlighting the cell (single or double click) and then typing the new value. </p><p><span style=\" font-weight:600; color:#fc0107;\">!!! When editing the value in a cell, the edit is NOT complete until you leave that cell. Make it a practice to \'tab out\' of a cell that you have modified. (but not needed for a cell that has been modified by a right-click context menu) !!!</span></p><p><span style=\" color:#000000;\">Constraints on property values:</span></p><p><span style=\" color:#000000;\">---- name: none</span></p><p><span style=\" color:#000000;\">---- thresh: positive integer</span></p><p><span style=\" color:#000000;\">---- def mask radius: minimum value of 2.00  (initial value is 5.3)</span></p><p><span style=\" color:#000000;\">---- color: only one green allowed and no more than two yellows</span></p><p><span style=\" color:#000000;\">---- thumbnail source: only a single aperture can be set as the thumbnail source</span></p><p><span style=\" color:#000000;\">---- csv output order: positive integer (it\'s up to you to avoid duplicates!)</span></p></body></html>"))
        self.editAperturesButton.setText(_translate("MainWindow", "Examine/change aperture settings"))
        self.maskRadiusLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>If there is a \'green\' aperture showing, changing this spinner, either through the up/down tabs or by direct edit, will update the default mask radius for that aperture. <span style=\" font-weight:600; color:#fc0107;\">Thumbnail Two</span> in the lower right corner will update dynamically to show the effect of the change on the binary sample mask generation.</p></body></html>"))
        self.maskRadiusLabel.setText(_translate("MainWindow", "Set radius (pixels) of default mask"))
        self.setMskthLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>If there is a currently \'green\' aperture showing, its threshold value will be set to any new value from this spinner and <span style=\" font-weight:600; color:#fc0107;\">Thumbnail Two</span> in the lower right corner will update dynamically to show the effect of the change on the binary sample mask generation.</p><p>The mask threshold is always set as counts above average background.  A good starting point for setting this value is to set it equal to the background noise (found in the column labelled <span style=\" font-weight:600; color:#fc0107;\">bkstd</span> in the text box) rounded up. The program tries to do this automatically so, in most cases, this value will already be preset. This is sometimes referred to as <span style=\" color:#0000ff;\">\'setting the threshold to 1 sigma\'</span>.</p></body></html>"))
        self.setMskthLabel.setText(_translate("MainWindow", "set mskth counts above bkavg"))
        self.backSmallButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jump back 25 frames.</p></body></html>"))
        self.backSmallButton.setText(_translate("MainWindow", "< 25 frames"))
        self.backBigButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jump back 200 frames.</p></body></html>"))
        self.backBigButton.setText(_translate("MainWindow", "< 200 frames"))
        self.forwardSmallButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jump forward 25 frames.</p></body></html>"))
        self.forwardSmallButton.setText(_translate("MainWindow", "25 frames >"))
        self.forwardBigButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jump forward 200 frames.</p></body></html>"))
        self.forwardBigButton.setText(_translate("MainWindow", "200 frames >"))
        self.currentFrameLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This box controls which frame is currently being analyzed. It can be changed by direct entry or by use of the spinner control buttons.</p><p>This will be the starting frame for an extraction triggered by clicking on the <span style=\" font-weight:600; color:#fc0107;\">Start analysis</span> radio button to the right.</p></body></html>"))
        self.currentFrameLabel.setText(_translate("MainWindow", " Current frame:"))
        self.stopAtFrameLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This box controls which frame will be the final frame in a lightcurve extraction.</p><p>At initial file read, this box will be populated with the highest available frame number.</p><p>Should you change the value in this box and wish to reset it back to the correct maximum frame number, click on the <span style=\" font-weight:600; color:#fc0107;\">Set max stop frame</span> button located below and to the left.</p><p>Note: the value here can be less than than that in the <span style=\" font-weight:600; color:#fc0107;\">Current frame</span> entry. In that case, when an analysis is started, it will proceed \'backwards\' from higher numbered frames to lower numbered frames. When running \'backwards\', the analysis stops 1 frame before the <span style=\" font-weight:600; color:#fc0107;\">Stop at frame</span> value to make it convenient to run from both ends without duplicating the <span style=\" font-weight:600; color:#fc0107;\">Stop at frame</span>. </p></body></html>"))
        self.stopAtFrameLabel.setText(_translate("MainWindow", "Stop at frame:"))
        self.runRadioButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this radio button will start an automatic lightcurve extraction, starting at the current frame number and ending at the <span style=\" font-weight:600; color:#fc0107;\">Stop at frame</span> number.</p><p>The current frame number is dynamically updated to show the progress of the extraction.</p><p>The <span style=\" font-weight:600; color:#fc0107;\">Pause</span> radio can be used to suspent the lightcurve extraction without loss of data.</p><p>Note that an analysis can be run \'backwards\' by setting the <span style=\" font-weight:600; color:#fc0107;\">Stop at frame</span> value less than the <span style=\" font-weight:600; color:#fc0107;\">Current frame</span> entry.</p></body></html>"))
        self.runRadioButton.setText(_translate("MainWindow", "Start analysis "))
        self.pauseRadioButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this radio button while a lightcurve extraction is in progress will stop the extraction, without loss of data.</p><p>You can subsequently click on the <span style=\" font-weight:600; color:#fc0107;\">Run</span> radio button to resume the lightcurve extraction.</p></body></html>"))
        self.pauseRadioButton.setText(_translate("MainWindow", "Pause analysis"))
        self.setMaxStopButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Click this button to restore the <span style=\" font-weight:600; color:#fc0107;\">Stop at frame</span> number to the maximum available frame number.</p></body></html>"))
        self.setMaxStopButton.setText(_translate("MainWindow", "Set max stop frame"))
        self.displayPlotsButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this button triggers the production of a set of plots that provides a visual summary of the aperture data collected.</p><p>These plots make use of the name that you have assigned to each aperture (you did do that didn\'t you?). While there is an automatic unique name given to each aperture at creation time, providing user-friendly aperture names will help greatly in identifying the plots and is particularly useful in identifying csv file columns.</p><p>Apertures can be renamed at any time without losing any data, so please make use of this feature: it will make consumers of your lightcurves happy.</p><p>A composite plot is produced that contains the lightcurves for all of the apertures on a single plot.</p><p>Then a plot for each individual aperture is produced. This plot has two parts: a large \'signal intensity\' suplot at the top and a smaller \'number of mask pixels\' subplot at the bottom.</p><p>In the individual plots a symbol code is used to indicate when a default mask was used. Instead of a colored circle for signal intensity, a black triangle is used instead to indicate that the mask used in measuring this point\'s intensity was not computed from the image but was instead a \'default\' of some kind.</p></body></html>"))
        self.displayPlotsButton.setText(_translate("MainWindow", "Display plots"))
        self.writeCsvButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this button opens a Save File dialog. Use this dialog to name and, optionally select the directory where you wish the csv file to be written. The default directory is the directory from which the video data was read.</p><p>A set of columns is created for each aperture with the column naming incorporating the aperture name for identification.</p><p>Hopefully you named each aperture in a logical manner. While there is an automatic unique name given to each aperture at creation time, providing user-friendly aperture names will help greatly in identifying the csv file columns.</p><p>Apertures can be renamed at any time without losing any data, so please make use of this feature: it will make consumers of your csv file happy.</p></body></html>"))
        self.writeCsvButton.setText(_translate("MainWindow", "Write csv"))
        self.roiComboBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>This drop-down selection box changes the measurement aperture size.</p><p><span style=\" font-weight:600; color:#fc0107;\">Note:</span> it is a reqirement that all apertures be the same size during a lightcurve extraction, so changing the aperture size will automatically remove all existing apertures.</p><p>If there is substantial wind shake in the video, you should select an aperture size sufficent to contain the \'wanderings\' of the star you have selected for tracking or, if there is no tracking star, then the target star itself.</p><p>If there is no significant wind shake, use of a smaller aperture (like 31) may be more useful in dealing with dense star fields.</p></body></html>"))
        self.selectApertureSizeLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This drop-down selection box changes the measurement aperture size.</p><p><span style=\" font-weight:600; color:#fc0107;\">Note:</span> it is a reqirement that all apertures be the same size during a lightcurve extraction, so changing the aperture size will automatically remove all existing apertures.</p><p>If there is substantial wind shake in the video, you should select an aperture size sufficent to contain the \'wanderings\' of the star you have selected for tracking or, if there is no tracking star, then the target star itself.</p><p>If there is no significant wind shake, use of a smaller aperture (like 31) may be more useful in dealing with dense star fields.</p></body></html>"))
        self.selectApertureSizeLabel.setText(_translate("MainWindow", "Select aperture size"))
        self.plotSymbolSizeLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This spinner sets the size of the symbols used in the plots to show a data value position. </p><p>If you open a set of plots and would like to see smaller or larger dots, simply close the plots, change the symbol size using this spinner and reopen the plots.</p></body></html>"))
        self.plotSymbolSizeLabel.setText(_translate("MainWindow", "Plot symbol size:"))
        self.viewFieldsCheckBox.setText(_translate("MainWindow", "View avi fields"))
        self.processAsFieldsCheckBox.setText(_translate("MainWindow", "Process avi in field mode"))
        self.topFieldFirstRadioButton.setText(_translate("MainWindow", "top field is first in time"))
        self.bottomFieldFirstRadioButton.setText(_translate("MainWindow", "bottom field is first in time"))
        self.useYellowMaskCheckBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>If there is significant wind shake during the occultation, the use of a default circular mask is inappropriate because we know that the star image is not circular but rather more snake-like.</p><p>However, it is reasonable to expect that the wanderings of the tracking star are the same as the wanderings of the target star and so a mask computed from the tracking star, while it will probably contain more pixels than one might like, has the correct shape to be used for the target star as well.</p><p>Checking this box will cause the \'yellow\' mask to be used for measuring all target images.</p><p>This is a \'last hope\' option: good luck with it.</p></body></html>"))
        self.useYellowMaskCheckBox.setText(_translate("MainWindow", "yellow mask = default"))
        self.ucac4Label.setToolTip(_translate("MainWindow", "<html><head/><body><p>The entry here must be of the form XXX-XXXXXX otherwise you will get a \'star not found\' message instead of the coordinates you were seeking.</p></body></html>"))
        self.ucac4Label.setText(_translate("MainWindow", "UCAC4"))
        self.starIdEdit.setToolTip(_translate("MainWindow", "<html><head/><body><p>The entry here <span style=\" text-decoration: underline;\">must</span> be of the form XXX-XXXXXX otherwise you will get a \'star not found\' message instead of the coordinates you were seeking.</p></body></html>"))
        self.queryVizierButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>This button triggers a query to Vizier for the J2000 coordinates of a UCAC4 star. The coordinates found are displayed in the edit box below in hms dms format.</p><p>The UCAC4 caltalog is used (VizieR catalog I/322A)</p></body></html>"))
        self.queryVizierButton.setText(_translate("MainWindow", "Query VizieR"))
        self.saveTargetLocButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>If you are working in a FITS folder or an AVI-WCS folder, clicking this button causes the location to be written to the file <span style=\" font-weight:600; color:#fc0107;\">target-location.txt </span>in that folder.</p></body></html>"))
        self.saveTargetLocButton.setText(_translate("MainWindow", "Set as target"))
        self.vtiSelectLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This control provides a drop-down list of VTI (video time inserter) models for which OCR (optical character recognition) timestamp processing is available. Selecting an entry will cause a constellation of character extraction boxes to be displayed on the image (which automatically switches to field view).</p><p>If the character selection boxes enclose the correct characters and are well-aligned, then you\'re ready to go.</p><p>If the character boxes are not well aligned, use the jogging buttons to the right to achieve a better alignment.</p></body></html>"))
        self.vtiSelectLabel.setText(_translate("MainWindow", "select VTI: "))
        self.vtiSelectComboBox.setToolTip(_translate("MainWindow", "<html><head/><body><p>This control provides a drop-down list of VTI (video time inserter) models for which OCR (optical character recognition) timestamp processing is available. Selecting an entry will cause a constellation of character extraction boxes to be displayed on the image (which automatically switches to field view).</p><p>If the character selection boxes enclose the correct characters and are well-aligned, then you\'re ready to go.</p><p>If the character boxes are not well aligned, use the jogging buttons to the right to achieve a better alignment.</p></body></html>"))
        self.repositionOcrBoxesLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>Because of the way that frame grabbers work, it will often be the case that the character selection boxes are not perfectly aligned. Different frame grabbers will trim a different number of lines from the top and bottom of the display --- there is no standard govening this. So, you may well need to shift the position of the character selection box constellation to match your camera/frame-grabber combination. The position changes that you make will be \'sticky\', so if your equipment pipeline doesn\'t change, you will only need to make this alignment once.</p><p>The buttons to the right move the entire constellation of OCR selection boxes.</p><p>An individual OCR selection box can be jogged left or right or up or down by right-clicking on a specific OCR box and selecting Enable jogging so that pressing an arrow key will produce the disered movement. More than one ocr box can be \'joggable\' at a time. Do NOT interchange the positions of boxes as there is a specific left to right character sequence that must be maintained for the timestamp formatting routines to work correctly.</p></body></html>"))
        self.repositionOcrBoxesLabel.setText(_translate("MainWindow", "  reposition OCR boxes: "))
        self.jogOcrBoxesUpButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jog the complete constellation of OCR character selection boxes up one pixel.</p><p>This must be done on <span style=\" font-weight:600; color:#fc0107;\">other than frame 0</span> (enforced by the program) because the frame 0 image is often not representative of the images that follow, so we don\'t want to change OCR selection box positions based on that frame.</p></body></html>"))
        self.jogOcrBoxesUpButton.setText(_translate("MainWindow", "up"))
        self.jogOcrBoxesLeftButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jog the complete constellation of OCR character selection boxes left one pixel.</p><p>This must be done on <span style=\" font-weight:600; color:#fc0107;\">other than frame 0</span> (enforced by the program) because the frame 0 image is often not representative of the images that follow, so we don\'t want to change OCR selection box positions based on that frame.</p></body></html>"))
        self.jogOcrBoxesLeftButton.setText(_translate("MainWindow", "left"))
        self.jogOcrBoxesRightButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jog the complete constellation of OCR character selection boxes right one pixel.</p><p>This must be done on <span style=\" font-weight:600; color:#fc0107;\">other than frame 0</span> (enforced by the program) because the frame 0 image is often not representative of the images that follow, so we don\'t want to change OCR selection box positions based on that frame.</p></body></html>"))
        self.jogOcrBoxesRightButton.setText(_translate("MainWindow", "right"))
        self.jogOcrBoxesDownButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Jog the complete constellation of OCR character selection boxes down one pixel.</p><p>This must be done on <span style=\" font-weight:600; color:#fc0107;\">other than frame 0</span> (enforced by the program) because the frame 0 image is often not representative of the images that follow, so we don\'t want to change OCR selection box positions based on that frame.</p></body></html>"))
        self.jogOcrBoxesDownButton.setText(_translate("MainWindow", "down"))
        self.stackFramesButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>To assist in locating a dim target star, an enhanced &quot;finder&quot; image can be generated by aligning and stacking (summing) a number of frames.</p><p>This intensified image can then be used for positioning an aperture on the target star, even though that star might be invisible in a single frame.</p><p><span style=\" font-weight:600; color:#fc0107;\">NOTE:</span> in order for this procedure to work, it is <span style=\" font-weight:600; color:#fc0107;\">essential</span> to remove any timestamp overlay that may be present. That is because, unlike a program like RegiStax that registers frames using star centroids, the procedure used here is to apply the \'Fourier transform phase correlation algorithm\' to calculate the pixel offset between the reference frame and the subsequent frames. If there is anything in the image that does not move (like a timestamp), that math calculation will fail and the resulting \'stack\' will not be useful --- it will register the frames on the timestamp rather than the star field.</p><p>The edit box labelled \'redact lines\' specifies how many lines to remove from the bottom of the image to get rid of the timestamp.</p><p>The edit box labelled \'num frames\' specifies how many frames to register and sum. For the purpose of locating a star that can produce an occultation light curve, a number of frames in the range of 100 to 400 is effective. If this number is set too high, while the target star might become visible in this enhanced image, it is likely to be lost in quantization and noise effects when frame by frame aperture photometry is attempted.</p><p><span style=\" font-weight:600; color:#fc0107;\">NOTE:</span> if timestamps were present (but redacted), the &quot;finder&quot; image will show the timestamp of the first frame in the stack, the so-called reference frame that all others are aligned/registered against to build the \'stack\'.</p></body></html>"))
        self.stackFramesButton.setText(_translate("MainWindow", "Generate \"finder\" image"))
        self.finderRedactLinesLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This entry is used to specify how many lines from the image bottom to remove to get rid of the timestamp.</p><p>Getting rid of the timestamp is <span style=\" font-weight:600; color:#fc0107;\">essential</span> for getting a good image to image registration based on the star field movement. If the timestamp is not removed, then the stacking process will likely register on the timestamp instead.</p></body></html>"))
        self.finderRedactLinesLabel.setText(_translate("MainWindow", "redact lines"))
        self.finderNumFramesLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This edit box specifies how many frames to register and sum. For the purpose of locating a star that can produce an occultation light curve, a number of frames in the range of 100 to 400 is effective. If this number is set too high, while the target star might become visible in this enhanced image, it is likely to be lost in quantization and noise effects when frame by frame aperture photometry is attempted.</p><p>Of course, your objective might be to get a \'pretty picture\' of the star field. If so, have at it, but be aware that stars may \'appear\' for which an occultation light curve cannot be extracted when processing is done frame by frame.</p></body></html>"))
        self.finderNumFramesLabel.setText(_translate("MainWindow", "num frames"))
        self.metadataButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this button will show (in the text box below) all metadata from the currently displayed .fits file.</p><p>\'metadata\' is the text information that is present in the header of the .fits file.</p></body></html>"))
        self.metadataButton.setText(_translate("MainWindow", "Show FITS metadata"))
        self.demoMeanPushButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>The \'robust\' calculation of the background average and the \'robust\' estimation of the dispersion (noise) in the background is an important factor in the calculation of signal intensities.</p><p>This button demonstrates with a detailed plot the calculation as it was performed for the current \'thumbnail\'.</p><p>This is meant primarily for education purposes but may be useful in special cases to confirm (or not) that the \'robust\' calculations are reasonable.</p><p>Note: the scale of dispersion (noise) is calulated using the MAD (Median Absolute Deviation) technique. Making the assumption that the background pixel counts (exclusive of outliers) are drawn from a Gaussian distribution, the bkstd is calculated as 1.4826 * MAD(aperture).</p></body></html>"))
        self.demoMeanPushButton.setText(_translate("MainWindow", "Demo Robust Mean"))
        self.view3DButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>This button opens a new window that shows a 3D rendering of the Thumbnail One image.</p></body></html>"))
        self.view3DButton.setText(_translate("MainWindow", "Show 3D thumbnail"))
        self.frameToFitsButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>This button is used to get a WCS calibration for the current image by utilizing the on-line service nova.astrometry.net</p><p>If this service fails (see discussion below) then you could try the<span style=\" font-weight:600; color:#fc0107;\"> Manual WCS calibration</span> button. It prompts you to put an aperture around two known stars in your image by using a star chart (preferably with UCAC4 star designations). If those stars are sufficiently far apart, we can use the icrs coordinates in conjuction with the xy position of the aperture to \'calibrate\' that image.</p><p>nova.astrometry.net is designed to do \'blind\' identification and WCS calibration on star field images. But it will not be able to identify images that have a too narrow field of view. If your field of view is under 15 arcmin, it is not likely to be able to calibrate that image and it will spend a long time (many minutes) trying. If an image is going to be successfully identified, it will take only a few seconds of cpu time after getting a job assigned (which takes one to two minutes).</p><p>Clicking this button reads the currrent frame and redacts the timestamp area by replacing all bytes in the timestamp zone with the Robust background (constant value).</p><p>The number of lines to be redacted are controlled by the <span style=\" font-weight:600; color:#fc0107;\">redact lines</span> edit box.</p><p>This redacted image is written as a file suitable for submission to nova.astrometry.net together with a user entered target star position (RA and Dec at J2000).</p><p>The entries for the star position values are entered into a star position dialog that will appear if no star position has yet been defined.</p><p>That same dialog form provides for the entry of the user\'s nova.astrometry.net api key. This value will be \'sticky\' (preserved across runs of PyMovie) and is required for submitting images for WCS calibration. It\'s easy (and free) to obtain. Simply go to nova.astrometry.net and sign in by clicking on your choice of credential supplier, no need to create a username/password combination. Afer signing in, click on My Profile and your api key will be displayed there.</p></body></html>"))
        self.frameToFitsButton.setText(_translate("MainWindow", "astrometry WCS calib"))
        self.astrometryRedactLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This entry is only used when preparing a frame for submission to nova.astrometry.net for WCS calibration.</p><p>If there is a timestamp overlay, its presence may make the WCS location and calibration harder (takes longer) for nova.astrometry.net. So, before submitting an image to nova.astrometry.net, we like to \'redact\' the timestamp area by replacing the bottom lines with the average background (sampled from the center of the image). The value in this box controls how many lines from the bottom get this treatment.</p><p>Entering a negative number will redact lines from the top.</p></body></html>"))
        self.astrometryRedactLabel.setText(_translate("MainWindow", "redact lines"))
        self.manualWcsButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>This button starts a \'manual\' WCS calibration (user guided reference star designation).</p><p><span style=\" font-weight:600; color:#fc0107;\">Manual WCS calibration</span> utilizes two stars with known icrs coordinates together with their xy position in the image to compute a mapping from icrs coordinates to pixel coordinates.</p><p>When this button is pressed, all previous manual WCS calibration data is erased (you have to confirm this action). Then the work flow expected is:</p><p>1) Use the VizieR query to get the icrs coordinates of the first reference star. (So do your star chart with UCAC4 annotations).</p><p>2) Put an aperture on that star.</p><p>3) Adjust (if necessary) the aperture so that the centering is satisfactory.</p><p>4) Right click on the aperture and click on <span style=\" font-weight:600; color:#fc0107;\">Set RA Dec (from VizieR query results)</span></p><p><span style=\" color:#000000;\">5) Repeat steps 1...4 for the second reference star.</span></p><p><span style=\" color:#000000;\">6) If you have already defined the target coordinates, an aperture will immediately appear at the proper image location, otherwise ...</span></p><p><span style=\" color:#000000;\">7) ... use the VizieR query to get the target coordintes and then click the </span><span style=\" font-weight:600; color:#fc0107;\">Set as target</span><span style=\" color:#000000;\"> button. The target aperture will then appear.</span></p><p><br/></p></body></html>"))
        self.manualWcsButton.setText(_translate("MainWindow", "Manual WCS calib"))
        self.manualPlateScaleLabel.setToolTip(_translate("MainWindow", "This edit box allows a plate scale to be specified for a manual WCS calibration.\n"
"Normally, this box should be left empty. The plate scale will then be calculated (and reported for your records) from the two calibration apertures specified.\n"
"If you think that you know the plate scale more precisely than what can be calculated from two points (which might necessarily be close together due to a puacity of good stars to use for calibration), then definitely enter that value in this box."))
        self.manualPlateScaleLabel.setText(_translate("MainWindow", "plate scale"))
        self.documentationPushButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking on this button will open a pdf file that provides additional documentation beyond that incorporated in the Hover Help system (which will/should be your first stop for assistance).</p></body></html>"))
        self.documentationPushButton.setText(_translate("MainWindow", "Documentation"))
        self.clearAppDataButton.setToolTip(_translate("MainWindow", "<html><head/><body><p>Clicking this button deletes all data that has been accumulated in the apertures. (The apertures are \'objects\' with properties like color, location, threshold, and also hold the recorded data itself).</p><p>It is often the case that one will \'experiment\' with the video by running short stretches of it.</p><p>All of the data produced while in the \'run\' state is accumulated, even when you do it piecemeal. This can cause data points to be recorded multiple times.</p><p>Best practice is, before starting a production by setting the starting and stopping frame numbers, that one clears any previous data.</p></body></html>"))
        self.clearAppDataButton.setText(_translate("MainWindow", "Clear aperture data"))
        self.mainImageLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>Context menus invoked by the usual mouse right-click are used to place measurement apertures, change their properties, name them, remove them, and control the image view itself.</p><p>For controlling the image view itself, a left-click and hold will allow the image to be panned in all directions with subsequent mouse movement.</p><p>A right-click and hold allows zooming in the direction of subsequent mouse movement.</p><p>A right-click in a region that does not contain a measuring aperture will cause a context menu to appear that has <span style=\" font-weight:600; color:#fc0107;\">Add snap-to-blob aperture</span> and <span style=\" font-weight:600; color:#fc0107;\">Add static aperture (no snap)</span> menu entries. You will almost always be using the \'snap-to-blob\' aperture; <span style=\" font-weight:600; color:#fc0107;\">Add static aperture (no snap</span><span style=\" font-weight:600;\">)</span> is used for placing an aperture exactly where you want it (i.e., no snap). This will most commonly be used for placing a <span style=\" font-weight:600; text-decoration: underline;\">white</span> aperture (see below) and for placing an aperture on a &quot;finder&quot; image.</p><p>On this same context menu, there are menu items for controlling aspects of the image view itself; the most used menu item will be <span style=\" font-weight:600; color:#fc0107;\">View all</span>, used after a <span style=\" font-weight:600; text-decoration: underline; color:#fc0107;\">scroll wheel zoom</span> or <span style=\" text-decoration: underline; color:#fc0107;\">left-click-drag-for-pan</span> have been used to adjust the view to return the size and position to the original condition.</p><p>A right-click <span style=\" font-weight:600; text-decoration: underline;\">inside</span> a measurement aperture brings up a context menu that allows you to change propertires of the aperture. You will be most concerned with the color of the aperture:</p><p>A <span style=\" font-weight:600; text-decoration: underline;\">yellow</span> aperture around a bright star causes that star to be used as a tracking reference. If you select a single star as a tracking reference, translation movements (the image as a whole moves some number of pixels up, down, and sideways) of the star field will be tracked. The aperture constellation as a whole will be translated.</p><p>You can add a second yellow aperture (no more than two are allowed) if there a possibility of field rotation as well as field translation. In this case, tracking equations are used that allow for the aperture constellation as a whole to be both rotated and translated in order to follow the star field.</p><p>A <span style=\" font-weight:600; text-decoration: underline;\">green</span> aperture is connected to the threshold setting spinner to make it easier to modify threshold settings. That spinner has the longish title: <span style=\" color:#fc0107;\">set mskth counts above bkavg</span></p><p>A <span style=\" font-weight:600; text-decoration: underline;\">white</span> aperture is useful when flash-tags have been recorded in the video. The special thing about a white aperture is that all pixels in the aperture are summed and output as the \'signal\' with no background subtraction. Such a signal can be employed by PyOTE to provide an alternative to the timestamp overlay from Video Time Inserters. In addition, a \'white\' aperture always stays where placed --- it does not track and is never part of an aperture constellation group.</p><p>A <span style=\" font-weight:600; text-decoration: underline;\">red</span> aperture has the special property that it will only form a mask from a blob that is within 8 pixels of the center. This helps keep a nearby bright star from interfering with mask formation..</p></body></html>"))
        self.mainImageLabel.setText(_translate("MainWindow", "Right-click here for image/aperture help"))
        self.textOutLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>Here is the \'decoder\' for the column headings:</p><p>signal = sum of all pixels included in the mask with the background (bkavg) subtracted from each one.</p><p>appsum = sum of all pixels included in the mask </p><p>bkavg = average background, calculated using a Robust Mean estimator with 50% outlier rejection.</p><p>bkstd = standard deviation of the background, calculated using a Robust Scale estimator with 50% outlier rejection (assumes gaussian distribution)</p><p>mskth = Thresh used in forming mask. This value is added to bkavg to compute binary mask</p><p>mskpx = number of pixels in binary mask - if negative, a default mask was used</p><p>cvxhull = convex hull: the area enclosed by a rubber band that surrounds the mask.</p><p>xpos = y position of centroid in image coordinates</p><p>ypos = x position of centroid in image coordinates</p><p>minpx = minimum value pixel contained in the aperture</p><p>maxpx = maximum value pixel contained in the aperture</p></body></html>"))
        self.textOutLabel.setText(_translate("MainWindow", "Right-click here for info"))
        self.thumbnailOneLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">This panel shows a zoomed version of the image contained within the aperture boundaries.</span></p></body></html>"))
        self.thumbnailOneLabel.setText(_translate("MainWindow", "<html><head/><body><p>Thumbnail One (right-click here for info)</p></body></html>"))
        self.thumbnailTwoLabel.setToolTip(_translate("MainWindow", "<html><head/><body><p>This image shows the mask that will be applied to the image shown in Thumbnail One.</p><p>Currently, the \'mask\' is dynamically calculated by the following steps: </p><p>1) Thumbnail One is blurred using a 5x5 pixel Gaussian.</p><p>2) <span style=\" font-weight:600; color:#fc0107;\">set mskth counts above bkavg</span> is used to turn the blurred Thumbnail One image into a binary image (only the values 0 and 1 are present) by setting to 0 all pixels that are &lt;= <span style=\" font-weight:600; color:#fc0107;\">set mskth counts above bkavg </span><span style=\" color:#fc0107;\">+ bkavg</span> and setting to 1 all pixels that are greater than <span style=\" font-weight:600; color:#fc0107;\">set mskth counts above bkavg </span><span style=\" color:#fc0107;\">+ bkavg</span>. </p><p>3) The resulting binary image is processed to find all \'blobs\' (connected groups of pixels with value 1).</p><p>4) The signal contained in each blob is computed (with background subtraction).</p><p>5) If a tracking star is present and this is a target star (non-yellow aperture), an additional constraint is enforced: the centroid of the \'blob\' must lie within a 8 pixel radius of the aperture center. This helps suppress any bright stars that may be in the aperture, but not in the center.</p><p>6) The \'blob\' found in step 5 is turned into the mask that is displayed in this thumbnail.</p></body></html>"))
        self.thumbnailTwoLabel.setText(_translate("MainWindow", "<html><head/><body><p>Thumbnail Two (right-click here for info)</p></body></html>"))
        self.actionLike_special_settings.setText(_translate("MainWindow", "Like special settings"))
        self.actionOr_preferences.setText(_translate("MainWindow", "Or preferences"))


from pyqtgraph import ImageView
